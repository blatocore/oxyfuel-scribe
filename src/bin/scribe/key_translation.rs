use global_hotkey::hotkey::HotKey;


use anyhow::{anyhow,Result};

// The scribe uses in its alphabet of Keys (and modifiers) similar enumeration to global_hotkeys,
// based on https://w3c.github.io/uievents-code/.
//
// The following function is my best effort to convert these into Enigo's custom enum 
pub fn scribe_to_enigo(input: &str) -> Result<enigo::Key> {
    let translated: Option<enigo::Key> = match input {
    	"F1" => Some(enigo::Key::F1),
        "F2" => Some(enigo::Key::F2),
        "F3" => Some(enigo::Key::F3),
        "F4" => Some(enigo::Key::F4),
        "F5" => Some(enigo::Key::F5),
        "F6" => Some(enigo::Key::F6),
        "F7" => Some(enigo::Key::F7),
        "F8" => Some(enigo::Key::F8),
        "F9" => Some(enigo::Key::F9),
        "F10" => Some(enigo::Key::F10),
        "F11" => Some(enigo::Key::F11),
        "F12" => Some(enigo::Key::F12),
        "F13" => Some(enigo::Key::F13),
        "F14" => Some(enigo::Key::F14),
        "F15" => Some(enigo::Key::F15),
        "F16" => Some(enigo::Key::F16),
        "F17" => Some(enigo::Key::F17),
        "F18" => Some(enigo::Key::F18),
        "F19" => Some(enigo::Key::F19),
        "F20" => Some(enigo::Key::F20),
        "F21" => Some(enigo::Key::F21),
        "F22" => Some(enigo::Key::F22),
        "F23" => Some(enigo::Key::F23),
        "F24" => Some(enigo::Key::F24),
        "F25" => Some(enigo::Key::F25),
        "F26" => Some(enigo::Key::F26),
        "F27" => Some(enigo::Key::F27),
        "F28" => Some(enigo::Key::F28),
        "F29" => Some(enigo::Key::F29),
        "F30" => Some(enigo::Key::F30),
        "F31" => Some(enigo::Key::F31),
        "F32" => Some(enigo::Key::F32),
        "F33" => Some(enigo::Key::F33),
        "F34" => Some(enigo::Key::F34),
        "F35" => Some(enigo::Key::F35),

        "Backquote" => Some(enigo::Key::Unicode('`')),
        "Backslash" => Some(enigo::Key::Unicode('\\')),
        "BracketLeft" => Some(enigo::Key::Unicode('[')),
        "BracketRight" => Some(enigo::Key::Unicode(']')),
        "Comma" => Some(enigo::Key::Unicode(',')),
        "Digit0" => Some(enigo::Key::Unicode('0')),
        "Digit1" => Some(enigo::Key::Unicode('1')),
        "Digit2" => Some(enigo::Key::Unicode('2')),
        "Digit3" => Some(enigo::Key::Unicode('3')),
        "Digit4" => Some(enigo::Key::Unicode('4')),
        "Digit5" => Some(enigo::Key::Unicode('5')),
        "Digit6" => Some(enigo::Key::Unicode('6')),
        "Digit7" => Some(enigo::Key::Unicode('7')),
        "Digit8" => Some(enigo::Key::Unicode('8')),
        "Digit9" => Some(enigo::Key::Unicode('9')),
        "Equal" => Some(enigo::Key::Unicode('=')),
        "KeyA" => Some(enigo::Key::Unicode('a')),
        "KeyB" => Some(enigo::Key::Unicode('b')),
        "KeyC" => Some(enigo::Key::Unicode('c')),
        "KeyD" => Some(enigo::Key::Unicode('d')),
        "KeyE" => Some(enigo::Key::Unicode('e')),
        "KeyF" => Some(enigo::Key::Unicode('f')),
        "KeyG" => Some(enigo::Key::Unicode('g')),
        "KeyH" => Some(enigo::Key::Unicode('h')),
        "KeyI" => Some(enigo::Key::Unicode('i')),
        "KeyJ" => Some(enigo::Key::Unicode('j')),
        "KeyK" => Some(enigo::Key::Unicode('k')),
        "KeyL" => Some(enigo::Key::Unicode('l')),
        "KeyM" => Some(enigo::Key::Unicode('m')),
        "KeyN" => Some(enigo::Key::Unicode('n')),
        "KeyO" => Some(enigo::Key::Unicode('o')),
        "KeyP" => Some(enigo::Key::Unicode('p')),
        "KeyQ" => Some(enigo::Key::Unicode('q')),
        "KeyR" => Some(enigo::Key::Unicode('r')),
        "KeyS" => Some(enigo::Key::Unicode('s')),
        "KeyT" => Some(enigo::Key::Unicode('t')),
        "KeyU" => Some(enigo::Key::Unicode('u')),
        "KeyV" => Some(enigo::Key::Unicode('v')),
        "KeyW" => Some(enigo::Key::Unicode('w')),
        "KeyX" => Some(enigo::Key::Unicode('x')),
        "KeyY" => Some(enigo::Key::Unicode('y')),
        "KeyZ" => Some(enigo::Key::Unicode('z')),
        "Minus" => Some(enigo::Key::Unicode('-')),
        "Period" => Some(enigo::Key::Unicode('.')),
        "Quote" => Some(enigo::Key::Unicode('\'')),
        "Semicolon" => Some(enigo::Key::Unicode(';')),
        "Slash" => Some(enigo::Key::Unicode('/')),

        "Alt" => Some(enigo::Key::Alt),
        "Backspace" => Some(enigo::Key::Backspace),
        "CapsLock" => Some(enigo::Key::CapsLock),
        "Control" => Some(enigo::Key::Control),
        "ControlLeft" => Some(enigo::Key::Control),
        "ControlRight" => Some(enigo::Key::Control),
        "Shift" => Some(enigo::Key::Shift),
        "ShiftLeft" => Some(enigo::Key::LShift),
        "ShiftRight" => Some(enigo::Key::RShift),
        "Enter" => Some(enigo::Key::Return),
        "MetaLeft" | "MetaRight" => Some(enigo::Key::Meta),
        "Space" => Some(enigo::Key::Space),
        "Tab" => Some(enigo::Key::Tab),
        "Delete" => Some(enigo::Key::Delete),
        "End" => Some(enigo::Key::End),
        "Help" => Some(enigo::Key::Help),
        "Home" => Some(enigo::Key::Home),
        "PageDown" => Some(enigo::Key::PageDown),
        "PageUp" => Some(enigo::Key::PageUp),
        "ArrowDown" => Some(enigo::Key::DownArrow),
        "ArrowLeft" => Some(enigo::Key::LeftArrow),
        "ArrowRight" => Some(enigo::Key::RightArrow),
        "ArrowUp" => Some(enigo::Key::UpArrow),
        "NumLock" => Some(enigo::Key::Numlock),
        "Escape" => Some(enigo::Key::Escape),
        "PrintScreen" => Some(enigo::Key::PrintScr),
        "ScrollLock" => Some(enigo::Key::ScrollLock),
        "Pause" => Some(enigo::Key::Pause),

        "AudioVolumeDown" => Some(enigo::Key::VolumeDown),
        "AudioVolumeMute" => Some(enigo::Key::VolumeMute),
        "AudioVolumeUp" => Some(enigo::Key::VolumeUp),
        "MicrophoneMuteToggle" => Some(enigo::Key::MicMute),
        "Super" => Some(enigo::Key::Meta),

        "MediaTrackNext" => Some(enigo::Key::MediaNextTrack),
        "MediaPlayPause" => Some(enigo::Key::MediaPlayPause),
        "MediaTrackPrevious" => Some(enigo::Key::MediaPrevTrack),
        "MediaStop" => Some(enigo::Key::MediaStop),
        
        // Straight invalid key names are caught by syntax checker
        // and a catchall _ could catch the rest, however the None
        // options are kept for transparency
        "Fn" => None, 
        "FnLock" => None, 
        "IntlBackslash" => None,
        "IntlRo" => None,
        "IntlYen" => None,
        "AltLeft" => None,
        "AltRight" => None,
        "ContextMenu" => None,
        "Convert" => None,
        "KanaMode" => None,
        "Lang1" => None,
        "Lang2" => None,
        "Lang3" => None,
        "Lang4" => None,
        "Lang5" => None,
        "NonConvert" => None,
        "Numpad0" => None,
        "Numpad1" => None,
        "Numpad2" => None,
        "Numpad3" => None,
        "Numpad4" => None,
        "Numpad5" => None,
        "Numpad6" => None,
        "Numpad7" => None,
        "Numpad8" => None,
        "Numpad9" => None,
        "NumpadAdd" => None,
        "NumpadBackspace" => None,
        "NumpadClear" => None,
        "NumpadClearEntry" => None,
        "NumpadComma" => None,
        "NumpadDecimal" => None,
        "NumpadDivide" => None,
        "NumpadEnter" => None,
        "NumpadEqual" => None,
        "NumpadHash" => None,
        "NumpadMemoryAdd" => None,
        "NumpadMemoryClear" => None,
        "NumpadMemoryRecall" => None,
        "NumpadMemoryStore" => None,
        "NumpadMemorySubtract" => None,
        "NumpadMultiply" => None,
        "NumpadParenLeft" => None,
        "NumpadParenRight" => None,
        "NumpadStar" => None,
        "NumpadSubtract" => None,
        "BrowserBack" => None,
        "BrowserFavorites" => None,
        "BrowserForward" => None,
        "BrowserHome" => None,
        "BrowserRefresh" => None,
        "BrowserSearch" => None,
        "BrowserStop" => None,
        "Eject" => None,
        "LaunchApp1" => None,
        "LaunchApp2" => None,
        "LaunchMail" => None,
        "MediaSelect" => None,
        "Power" => None,
        "Sleep" => None,
        "WakeUp" => None,
        "Hyper" => None,
        "Turbo" => None,
        "Abort" => None,
        "Resume" => None,
        "Suspend" => None,
        "Again" => None,
        "Copy" => None,
        "Cut" => None,
        "Find" => None,
        "Open" => None,
        "Paste" => None,
        "Props" => None,
        "Select" => None,
        "Undo" => None,
        "Hiragana" => None,
        "Katakana" => None,
        "Unidentified" => None,
        "BrightnessDown" => None,
        "BrightnessUp" => None,
        "DisplayToggleIntExt" => None,
        "KeyboardLayoutSelect" => None,
        "LaunchAssistant" => None,
        "LaunchControlPanel" => None,
        "LaunchScreenSaver" => None,
        "MailForward" => None,
        "MailReply" => None,
        "MailSend" => None,
        "MediaFastForward" => None,
        "MediaPause" => None,
        "MediaPlay" => None,
        "MediaRecord" => None,
        "MediaRewind" => None,
        "PrivacyScreenToggle" => None,
        "SelectTask" => None,
        "ShowAllWindows" => None,
        "ZoomToggle" => None,
        _ => None,
    };

    match translated {
        Some(key) => Ok(key),
        None => Err(anyhow!("Key \"{}\" is not supported for the TYPE command.\n\
                For available keys, use:\n\
                scribe [--keylist|--modlist] | grep '(T)'", {input})),
    }
}

pub fn scribe_to_global_hotkey(input: &str) -> Result<HotKey> {
    Ok(HotKey::try_from(input)?)
}

